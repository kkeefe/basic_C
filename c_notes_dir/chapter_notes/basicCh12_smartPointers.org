#+TITLE: basicCh12_smartPointers
** header file stuff
#+BEGIN_SRC C++
//function defintions
// #include "Sales_item.h"--moved to another directory?
#include <list>
#include <string>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <vector>
#include <map>
#include <unordered_map>
#include <set>
#include <utility> //includes pair
#include <memory>

using namespace std;

/*
   Word transformation functions!!
 ,*/
const string &transform(const string &s, const map<string, string> &m);

map<string, string> buildMap(ifstream &reference_file);

void word_transformation(ifstream &input_file, ifstream &reference_file);

/*
   END transformation functions!!
 ,*/

//best practice is to declare and define all inline and constexpr functions inside header files only: they must all match exactly and definition must be known at compile time.
inline bool is_shorter (const string& a, const string& b){
  return  (a > b) ? true : false;
}

/*
  PRINT FUNCTIONS!!
,*/

void print_map_string_stringvec(map<string, vector< string > > a){
  for(auto c : a){
    cout << "Family Name: " << c.first << ", has the following children:\n";
    int a(1);
    for(auto d : c.second){
      cout << a << ". " << d << endl;
      a++;
    }
  }
}

void print_map_string_vecPair_string_string(map<string, vector<pair<string,string>>> a){

  for(auto c : a){ //c has type pair string vec_pair
    cout << "Family Name: " << c.first << ", has the following children:\n";
    int a(1);
    for(auto d : c.second){ //d has type pair<string,string>
      cout << a << ". " << d.first << "\t";
      cout << d.first << "'s birthday is: " << d.second << endl;
      a++;
    }
  }
}

void print_map_iterator(map<string, vector<int>>::iterator map){
  cout << map->first << " is the first element.. " << endl;
  cout << map->second[1] << " is the second element of the vector space.. " << endl;
}

void print_multiMap_stringString(multimap<string, string> map){
  multimap<string, string>::iterator start = map.begin();
  while(start != map.end()){
    cout << start->first << " is the author name .. ";
    cout << start->second << " is the work .. " << endl;
    start++;
  }
}

// function for ch12 ex 6
shared_ptr<vector<int>> make_shared_vector(vector<int> vec_int){
  shared_ptr<vector<int>> shared_vec_int(new vector<int> (vec_int));
  return shared_vec_int;
}

// now make a function to print the values which we read..

ostream& print_shared_vector(ostream& os, shared_ptr<vector<int>> shared_vec_int){

  for(auto c : *shared_vec_int){
    os  << c << "\n";
  }
  return os;
}

// additional smart pointer practice:

void process_1(shared_ptr<int> ptr){
  cout << *ptr << " is the value pt shared_ptr " << ptr.use_count() << "\n";
}

// part of exercises 12.14 / 12.15
struct Data
{
  Data() = default;
  int value;
  int value2;
};

struct Analysis
{
  Analysis() = default;
  int value;
};

Analysis analyze(Data *d){
  Analysis a;
  a.value = 2*d->value;
  return a;
}

void stopAnalyze(Analysis){
  printf("analysis complete.\n");
}

void endAnalysis(Analysis* a){
  stopAnalyze(*a);
}

void manage_analysis(Data &c){
  cout << "running analysis.." << endl;
  Analysis d = analyze(&c);
  shared_ptr<Analysis>p(&d , endAnalysis);
}

// ex 12.15 wants to use endAnalysis as a lambda fnc instead..
void manage_analysis2(Data &c){
  cout << "running analysis2..\n";
  Analysis d = analyze(&c);
  shared_ptr<Analysis>p(&d, [](Analysis *a){stopAnalyze(*a);});
}
#+END_SRC
** useful parts:
*** section 1
#+BEGIN_SRC C++

  // Dynamic memory is managed through two operators: new and delete
  // new frees new object memory to associate with a pointer,
  // delete, obviously destroys the said pointer and frees memory..

  // three kinds of smart pointers: (all located in memory header)
  // shared_ptr -> multiple pointers to refer to the same object
  // unique_ptr -> "owns" object to which it points
  // weak_ptr   -> weak reference to an object managed by a shared_ptr

  // 12.1.1 - shared_ptr
  // these bad bois are templates, like vector< >

  shared_ptr<string> p1; // this guy can point to a string
  shared_ptr<list<int>> p2; // can point to a list of ints

  //lets check to see if p1 is empty
  if (p1 && p1->empty()) *p1 = "hi"; // will not currently at to p1..

  shared_ptr<int> p3 = make_shared<int>(42);
  cout << *p3;

  // exercise 1/2 -create SrBlob class and test size of addition..
  StrBlob b1;
  {
    StrBlob b2 = {"a", "an", "the"};
    b1 = b2;
    b2.push_back("about");
  }

  //  cout << "size of shared_ptr is: " << b1.size();

  // exercise 3 - do the push_back and pop_back functions need const?
  // exercise 4 - dat	a could be null pointer, but if it is pointer to 0, value is destroyed.
  // exercise 5 - constructor for initializer_list is not explicit, what are the pros / cons?
  // -> Pros : can be used for implicit conversion types
  // -> Cons : these pointers are fuckin confusing..

  // smart pointers are explicit..
  // smart pointers with new:
  // error : shared_ptr<int> shared_int = new int(1024);
  // shared_ptr<int> shared_int(new int(1024));
  // cout << "\nthe value of shared int is: " << *shared_int << endl;

  #+END_SRC
*** section 1.3 and 1.4
#+BEGIN_SRC C++
  // write a function which returns a dynamically allocated vector of ints..
  // pass that vector to another function that reads std::in to give values to
  // the elements
  // remember to delete the vector at the appropriate time..
  vector<int> vec1 = {1, 2, 3};
  auto shared_vec1 = make_shared_vector(vec1);
  print_shared_vector(cout, shared_vec1);

  // use no throw when you don't want to fail if there is in fact no new memory..
  int a(7);
  int *p3 = new (nothrow) int(a);

  // if you delete the pointer, it must be a dynamic pointer..
  // it is also okay to delete nullptrs..
  cout << *p3 << ", value of *p3\n";
  cout << a << ", value of a\n";
  delete p3;
  cout << a << ", value of a\n";
  cout << *p3 << ", value of *p3\n";

  // exercise 12.8 if you use a function to create dynamic memory objects, delete them
  // inside of the same scope. they are not freed by leaving the scope of the function..

  // Exercise: 12.9
  // explains what happens in the following code"
  int *q = new int(42) , *r = new int(100);
  r = q; // the memory is not freed from the original r value!
  // note that deleteing -either- p or r frees the memory..

  auto q2 = make_shared<int>(42) , r2 = make_shared<int>(100);
  cout << r2.use_count() << endl; // 1 ptr
  r2 = q2;
  cout << r2.use_count() << endl; // 2 ptr..

  // Exercise 12.10
  // explain if the following calls are legal:
  // the below function creates a new shared_ptr, passes it to process
  // the count inside of process is 2, and returns to 1 after scope.
  shared_ptr<int> p(new int(2048));
  process_1(shared_ptr<int>(p));
  cout << *p << " value again? " << p.use_count() << endl;

  // // Exercise 12.11
  // // what happens if instead?
  shared_ptr<int> w(new int(4098));
  process_1(shared_ptr<int>(w.get())); // bad malloc error!
  // this occurs since we initialized a shared_ptr from get..
  // get returns a built-in pointer and is destroyed in function call..
#+END_SRC

*** section 1.5
#+BEGIN_SRC C++
  // Exercise 12.12
  // use the following p & sp declarations. find what is legal / not
  auto pa = new int();
  auto sp = make_shared<int>();
  process_1(sp); // good to go
  process_1(make_shared<int>()); // good to go
  process_1(new int()); // no dice, like pa..
  process_1(pa); // no good, pa not a shared_ptr..

  // Exercise 12.13
  // what happens with the following code:
  auto sp = make_shared<int>();
  auto p4  = sp.get();
  delete p4; // like 12.11 this deletes the make_shared pointer, sp..

  // # Exercise 12.14
  // write your own version of a function which manages a
  // connection with a shared_ptr
  //
  //  Exercise 12.15
  // rewrite the above exercise to use a lamba
  // callable instead of a function..
  Data d1;
  d1.value = 1;
  manage_analysis(d1);
  manage_analysis2(d1);

  // begin section 5 stuff:
  uniqute_prts
  must use direct form of initialization
  find this beginning on page 470
#+END_SRC
*** section 1.5 cont..

#+BEGIN_SRC C++
  // 12.24 do this but some standard input
  char* userInput(new char[10]); // creating this dynamic array
  while( userInput[0] != 'e'){
    char test[10] , smol[5];
    std::cout << "please enter your dynamically allocated input: ";
    std::cin >> userInput; // note input can be larger than 10, but undefined use??
    std::cout << "you've entered: " << userInput << std::endl;
    std::cout << "please enter test, followed by smol:\n";
    std::cin >> test >> smol; // test and smol with break if input is larger than 10 / 5 respectively
    std::cout << "you've entered:\ntest: " << test << "\nsmol: " << smol << std::endl;
  }
#+END_SRC
- make a copy function which copies two const char ptrs into the same
  dynamically allocated const char ptr..
#+BEGIN_SRC C++
  // Exercise 12.26 - rewrite the program from the previous section using an allocator
  // this is exercises 12.23-26 together..
  const char* rawCharP("rawBurnt");
  const char* rawCharP2("rawChar");

  const int totalSize = (sizeof(rawCharP) + sizeof(rawCharP2));
  unique_ptr<char[]>dynamicRaw(new char[totalSize]);

  // copy the first elements into the array
  for(int i = 0; i < sizeof(rawCharP); ++i){
    dynamicRaw[i] = rawCharP[i];
  }

  // copy the second elements into the array.
  // make sure to start the second word at 0!
  for(int i = sizeof(rawCharP); i < totalSize; ++i){
    int j = i - sizeof(rawCharP); // this is index for starting second word.
    dynamicRaw[i] = rawCharP2[j];
  }
#+END_SRC
*** section 2.2 the allocator class
#+BEGIN_SRC C++
  // the allocator class:
  allocator<double> alloc_data;

  // dblData now points to one past the allocated memory, n
  // this creates 5 places for doubles, and dblData points to the first element
  auto const dblData = alloc_data.allocate(5);

  // create another pointer at the same location, but this can change
  auto constructData = dblData;

  // make the element 5 in the new slot
  alloc_data.construct(constructData++ , 5);

  // make the element 7 in the second slot
  alloc_data.construct(constructData++ , 7);

  // this will be called twice to destroy the two elements we created
  while (constructData != dblData){
    alloc_data.destroy(--constructData);
  }
  // once memory is destroyed, two options:
  // 1) reuse and reassign data
  // 2) return memory back to system with: alloc_data.deallocate(pointer , n_items);
  alloc_data.deallocate(dblData , 1);

#+END_SRC

- allocated memory must be:
  - actually allocated..
  - constructed with whatever item you want to put there..
  - destroyed if you want to put another item there or do something with it
  - deallocated to free and release the memory
#+BEGIN_SRC C++
// rewrite the program on 481 using an allocator class
// program on p481:

// create some integer to define a size
int n(3);
// make a string array of three strings
std::string *const p = new std::string[n];
std::string s; // a string to do the work
std::string *q = p; // a point to keep track of the current location
std::cout << "please enter words into new memory:\n";
// lets get some info into the container
while( std::cin >> s and q != p + n){
    ,*q++ = s;
    const size_type size = q - p;
    std::cout << size << ", is the size..\n";
};
// read out everything that we stored
while( q != p ){
    std::cout << *(--q) << ", q" << std::endl;
}
// get rid of the new string array
delete[] p;

allocator<std::string> alloc;
// redefinition of n, but standalone..
int n(3);
// where to get the new srting
std::string s;
std::string *const p1 = alloc.allocate(n); // first make the memory available
std::string *q1 = p1;
std::cout << "please enter words into allocated memory:\n";
while( std::cin >> s and q1 != p1 + n )
{
    // don't forget to increment q1
    alloc.construct(++q1 , s); // use this to create the object at the memory.
    const size_type size = q1 - p1;
    std::cout << size << ", is the size..\n"; // see what you're writing..
}
std::cout << "the words in the allocated memory are:\n";
// read out the words you just wrote in
while( q1 != p1 ){
    std::cout << *q1 << endl;
    alloc.destroy(--q1); // destroy the memory you don't need anymore..
}
// free the memory you just destroyed..
alloc.deallocate(p1 , n);
#+END_SRC
*** section 2.1 new and arrays
#+BEGIN_SRC C++

  int val = 5;
  // protip - do not assign uniq_ptr to val and then destroy it..
  // only one unique_ptr may exist at a time, and object is destroyed when unique_ptr is destroyed
  unique_ptr<int> uniq_int2(new int (42));
  val = 6;
  cout << *uniq_int2 << ", value\n";
  cout << "still here! :) \n";
  cout << *uniq_int2 << ", value\n";

  // exercise 12.16 how does gcc respond to copy assignments of uniq_ptr?
  // below produces a malloc "pointer being freed was not allocated" error
  // unique_ptr<int> uniq_int(&val);
  //
  // exercise 12.17:
  // which of the following are illegal?

  int ix = 1024 , *pi = &ix , *pi2 = new int(2048);
  typedef unique_ptr<int> IntP;
  // IntP p0(ix); // error no good type. ix is an int
  // IntP p1(pi); // malloc error on release
  // IntP p3(&ix); // malloc error on release.
  // IntP p5(p2.get()); // malloc error on release..
  IntP p4(new int(2048));
  IntP p2(pi2);

  // exercise 12.18:
  // why doesn't shared_ptr have a release memeber?
  // shared pointer can have many pointers to the same memory location..
  // it doesn't make sense to be able to 'free' all memebers at the same time,
  // this could equally be accomplished with deleting the location in memory, making
  // every one of the shared pointers a nullptr..

  // weak_ptr - does not control life time of memory
  // how to get access to a weak_ptr
  auto p = make_shared<int>(42);

  // binding a weak_ptr to a shared_ptr does not change the count..
  weak_ptr<int> wp(p);
  cout << wp.lock() << ", weak ptr .. \n";
  cout << *(wp.lock()) << ", weak value .. \n";
  wp.reset(); // make the ptr null
  wp.expired(); // check to see if w.use_count() is zero
  // weak_ptrs are useful for checking to see if shared_ptrs still exist
  // for the dynamic memory.

  // smart pointers , dynamic arrays , allocators
  // almost always better to use library containers.. but..

  // no initialization stuff with your array
  int *intArr_ptr = new int[7];
  cout << intArr_ptr << ", intArry ptr location.. \n";
  cout << *intArr_ptr << ", intArry value .. \n";
  // the method to kill this ptr..
  delete []intArr_ptr;

  // can list initialize your new dynamically created array!
  int *intArr_ptr2 = new int[7]{1,2,3,4,5,6,7};
  cout << intArr_ptr2 << ", intArry ptr location.. \n";
  cout << *(intArr_ptr2) << ", intArry value .. \n"; // default to zero
  intArr_ptr2 += 2; // point to a new position in the array
  cout << *(intArr_ptr2) << ", intArry value .. \n";

  // unique_ptr<T>
  // manage arrays allocated by new
  unique_ptr<int[]>uniq1_ptr(new int[10]);
  cout << uniq1_ptr << ", uniq1 ptr location.. \n";
  // currently unitiialized! random output!!
  cout << uniq1_ptr[1] << ", uniq1 value.. \n";
  uniq1_ptr[1] = 10; // can assign values to it!
  cout << uniq1_ptr[1] << ", uniq1 value.. \n";
  uniq1_ptr.reset();

  // shared_ptrs must supply their own deleter to manage
  // dynamic arrays..
  shared_ptr<int> shr_p(new int[10] , [](int*p) { delete [] p; });
  cout << *shr_p << ", shr_p value.. \n";
  shr_p.reset();

#+END_SRC

** StrBlobPtr info
*** header stuff
**** StrBlob
#+BEGIN_SRC C++
#include <vector>
#include <string>
#include <stdexcept>
#include <initializer_list>

//define the class structure as well as all functions / definitions used therin..
class StrBlobPtr; // give the forward declaration so it's known in StrBlob..
class ConstStrBlobPtr; // give the forward declaration so it's known in StrBlob..
class StrBlob
{
    typedef std::vector<std::string>::size_type size_type;

    // for exercise 12.19 stuff
    friend class StrBlobPtr;
    friend class ConstStrBlobPtr;

    public:
        //include your constructors
        StrBlob(); //default
        // initializer_list is a template which tolds a comma separted list of type <T>
        StrBlob(std::initializer_list<std::string> il);

        //include your member functions
        size_type size() const { return data->size(); }
        bool empty() const { return data->empty(); }
        //add or remove stuff
        void push_back(const std::string &t) { data->push_back(t); }
        void pop_back();

        //element access - these functions should be const member functions,
        std::string& front() const;
        std::string& back() const;

        // functions used to make StrBlobPtrs..
        StrBlobPtr begin();
        StrBlobPtr end();

        // functions used to make ConstStrBlobPtrs..
        ConstStrBlobPtr constbegin() const;
        ConstStrBlobPtr constend() const;

    private:
        std::shared_ptr<std::vector<std::string>> data;
        void check(size_type i, const std::string &msg) const;
};

// lets define those constructors..
StrBlob::StrBlob(): data(std::make_shared<std::vector<std::string>>()) { };
StrBlob::StrBlob(std::initializer_list<std::string> il) : data(std::make_shared<std::vector<std::string>>(il)) { };

// lets start defining some of the stuff you've created for this class..
void StrBlob::check(size_type i, const std::string &msg) const
{
    if (i >= data->size())
    throw std::out_of_range(msg);
}

std::string& StrBlob::front() const
{
    check(0, "front on empty StrBlob");
    // front is a vector method which returns the first element in the vector
    return data->front();
}

std::string& StrBlob::back() const
{
    check(0, "back on empty StrBlob");
    // back is a vector method which returns the last element in the vector
    return data->back();
}

void StrBlob::pop_back()
{
    check(0, "pop_back on empty StrBlob");
    // pop_back is a vector method which deletes the last element in the vector
    data->pop_back();
}

//////////////////// StrBlobPtr Stuff ////////////////////
class StrBlobPtr{

    typedef std::vector<std::string>::size_type size_type;

    public:
        StrBlobPtr(): curr(0) {  }
        StrBlobPtr(StrBlob &a , size_type sz = 0): wptr(a.data), curr(sz) {  }

        std::string& deref() const;
        StrBlobPtr& incr();
    private:
        std::shared_ptr<std::vector<std::string>> check(size_type, const std::string&) const;
        std::weak_ptr<std::vector<std::string>> wptr;
        size_type curr;
};

std::shared_ptr<std::vector<std::string>>
StrBlobPtr::check(size_type i, const std::string &msg) const
{
    // check to see if the wptr has expired or not
    auto ret = wptr.lock();

    // if it has, throw a runtime error
    if (!ret) throw std::runtime_error("unbound StrBlobPtr");

    // if the range exceeds the ptr, say that's to big
    if( i >= ret->size() ) throw std::out_of_range(msg);

    // if everything is good, give the ptr back.
    return ret;
}

std::string& StrBlobPtr::deref() const
{
    auto p = check(curr , "dereference past end");
    return (*p)[curr];
}

// prefix: return a reference to the incremented state
StrBlobPtr& StrBlobPtr::incr()
{
    // if curr already points past the end of the container, can't increment is
    auto p = check(curr , "increment past end of StrBlobPtr");
    ++curr;
    return *this;
}

StrBlobPtr StrBlob::begin() { return StrBlobPtr(*this); }
StrBlobPtr StrBlob::end() { return StrBlobPtr(*this, data->size()); }
#+END_SRC
**** StrBlobPtr
#+BEGIN_SRC C++
//////////////////// StrBlobPtr Stuff ////////////////////
class StrBlobPtr{

    typedef std::vector<std::string>::size_type size_type;

    public:
        StrBlobPtr(): curr(0) {  }
        StrBlobPtr(StrBlob &a , size_type sz = 0): wptr(a.data), curr(sz) {  }

        std::string& deref() const;
        StrBlobPtr& incr();
    private:
        std::shared_ptr<std::vector<std::string>> check(size_type, const std::string&) const;
        std::weak_ptr<std::vector<std::string>> wptr;
        size_type curr;
};

std::shared_ptr<std::vector<std::string>>
StrBlobPtr::check(size_type i, const std::string &msg) const
{
    // check to see if the wptr has expired or not
    auto ret = wptr.lock();

    // if it has, throw a runtime error
    if (!ret) throw std::runtime_error("unbound StrBlobPtr");

    // if the range exceeds the ptr, say that's to big
    if( i >= ret->size() ) throw std::out_of_range(msg);

    // if everything is good, give the ptr back.
    return ret;
}

std::string& StrBlobPtr::deref() const
{
    auto p = check(curr , "dereference past end");
    return (*p)[curr];
}

// prefix: return a reference to the incremented state
StrBlobPtr& StrBlobPtr::incr()
{
    // if curr already points past the end of the container, can't increment is
    auto p = check(curr , "increment past end of StrBlobPtr");
    ++curr;
    // return the object on which incr() was called..
    return *this;
}

StrBlobPtr StrBlob::begin() { return StrBlobPtr(*this); }
StrBlobPtr StrBlob::end() { return StrBlobPtr(*this, data->size()); }
#+END_SRC
**** ConstStrBlobPtr
- main difference is that this takes a const& in the constructor and the member
  functions are all const
#+BEGIN_SRC C++
class ConstStrBlobPtr{

    typedef std::vector<std::string>::size_type size_type;

    public:
        ConstStrBlobPtr(): curr(0) {  }
        ConstStrBlobPtr(const StrBlob &a , size_type sz = 0): wptr(a.data), curr(sz) {  }

        std::string& deref() const;
        ConstStrBlobPtr& incr();
    private:
        std::shared_ptr<std::vector<std::string>> check(size_type, const std::string&) const;
        std::weak_ptr<std::vector<std::string>> wptr;
        size_type curr;
};

std::shared_ptr<std::vector<std::string>>
ConstStrBlobPtr::check(size_type i, const std::string &msg) const
{
    // check to see if the wptr has expired or not
    auto ret = wptr.lock();

    // if it has, throw a runtime error
    if (!ret) throw std::runtime_error("unbound ConstStrBlobPtr");

    // if the range exceeds the ptr, say that's to big
    if( i >= ret->size() ) throw std::out_of_range(msg);

    // if everything is good, give the ptr back.
    return ret;
}

std::string& ConstStrBlobPtr::deref() const
{
    auto p = check(curr , "dereference past end");
    return (*p)[curr];
}

// prefix: return a reference to the incremented state
ConstStrBlobPtr& ConstStrBlobPtr::incr()
{
    // if curr already points past the end of the container, can't increment is
    auto p = check(curr , "increment past end of ConstStrBlobPtr");
    ++curr;
    return *this;
}

ConstStrBlobPtr StrBlob::constbegin() const{ return ConstStrBlobPtr(*this); }
ConstStrBlobPtr StrBlob::constend() const{ return ConstStrBlobPtr(*this, data->size()); }
#+END_SRC
*** all main code
#+BEGIN_SRC C++
  // 12.20 write a program to read a file line by line, then put each line into a strblob type
  // use a strblobptr to then print each element in that strblob..
  ifstream infile("strblob.txt");
  strblob blobfile;
  int linecount(0);
  // get the stuff from the infile..
  while(!infile.eof()){
    std::string line;

    // get the element from the file
    getline(infile , line);

    // put that element in the blob..
    blobfile.push_back(line);

    // keep track of the line count we're on
    linecount += 1;
  }

  // the strblobptr is initialized from the strblob: it needs that wptr data
  strblobptr sbp(blobfile);
  const strblob csb = blobfile;
  conststrblobptr csbp(csb);

  // just keep going..
  while(true)
  {
    // get the element you want to spit out
    cout << sbp.deref() << endl;

    // go to the next element
    sbp = sbp.incr();

    cout << "constant stuff:\n";
    cout << csbp.deref() << endl;

    // go to the next element
    csbp = csbp.incr();

    //  think of any stopping condition you want.
    if (linecount == 1) break;
    else linecount -= 1;
  }
#+END_SRC
