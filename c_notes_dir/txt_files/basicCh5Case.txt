#include <vector>
#include <iostream>
#include <string>
using std::vector;
using std::cin;
using std::cout;
using std::endl;
using std::string;

int maximum (int a, int b){
  if( a > b){
    return a;
  }else
    return b;
}


int main(){

  //attempted shorter solution

  //create a string vector to read from, and the words to add to it
  vector<string> stringVec, stringCompare;
  vector<int> stringCount;
  string word;
  
  cout << "Please input the string you would like to read from: ";

  //read from the words, create an exit conditon
  while(cin >> word and word != "exit"){
    //add every word to the string vector
    stringVec.push_back(word);
  }

  //now that the string vector is created, allow reading from it:
  //create a new vector to compare it to
  for(string & c : stringVec) {

    //start at position 0 in string compare each time
    int position = 0;
    bool reset = false;
    
    //for every c in stringCompare to every d in stringCompare
    for(string & d : stringCompare){
      if (c == d){
	stringCount[position]+=1;
	reset = true;
      }else if (d != c or reset){
	position++;
      }
    }
    //if there were no additions, add the word to the compare list;
    if(!reset){
      stringCompare.push_back(c);
      stringCount.push_back(1);
    }
  }

  for(int i = 0; i != stringCompare.size() and i != stringCount.size(); i++){
    cout << stringCompare[i] << " appeared " << stringCount[i] << " times " << endl;
  }
  
  
  // LONG SOLUTION 
  //section 5.4 example problems: 
  //read strings from standard input, spit out the word that appeared most during the input, and state how many times it appeared.

  // cout << "Please enter the inputs you would like to read from: " << endl;

  // vector<string> wordList, wordCompare;
  // string word;
  // vector<int> countVector;
  
  // //fill the string
  // while(cin >> word and word != "exit"){
  //   wordList.push_back(word);
  //   wordCompare.push_back(word);
  // }

  
  // //read and analyze the newly created string vector:
  // for(string & c : wordList){
  //   int count = 0;
  //   for(int i = 0; i != wordCompare.size(); i++){
  //     if(c == wordCompare[i]){
  // 	count++;
  //     }
  //     //store the counts in a corresponding int array
  //   }
  //   countVector.push_back(count);
  //   //reset the count for each word on the list, and display the number of counts in the list
  //   // cout << "the number of times '" << c << "' appears is: " << count << endl;
  // }

  // int max = 0;
  // //have a string vector. want to find which member of the vector shows up the most often..
  // //returns maximum count;
  // for(int c : countVector){
  //   max = maximum(c, max);
  // }

  // int position = 0;
  // //locates the position of the maximum count.
  // for(int c : countVector){
  //   if(c == max) break; //stop looking once you found the maximum.
  //   position++; //add to the position if you haven't found the maximum yet.
  // }

  // //report your findings.  
  // cout << "most frequent word ' " << wordList[position] << "'"
  //      << endl << "number of appearances: " << max  << endl;
  

  /* section 5.3 example problems */

  // //read from a cin file to count the number of vowels. selet the vowels using a series of if statements.
  // string word, line;
  // int vowelCount = 0;
  // int otherCount = 0;
  // int whiteSpace = 0;
  // int comboCount = 0;

  // //prompt for input
  // cout << "please type a word to get a vowel count: " << endl;

  // //get the whole line of input, type only exit to leave the program
  // while(getline(cin, line) and line != "exit"){
  //   for(char & c :  line){
  //     if(c == 'a' or c == 'A'){
  // 	vowelCount++;
  //     }else if(c == 'e' or c == 'E'){
  // 	vowelCount++;
  //     }else if(c == 'i' or c == 'I'){
  // 	vowelCount++;
  //     }else if(c == 'o' or c == 'O'){
  // 	vowelCount++;
  //     }else if(c == 'u' or c == 'U'){
  // 	vowelCount++;
  //     }else if(isspace(c)) {
  // 	whiteSpace++;
  //     }else 
  // 	otherCount++;
  //   }

  //   //check for combos of ff, fl, and fi independently
  //   for(int i = 0; i != line.size(); i++){
  //     if(line[i] == 'f'){
  // 	if(line[i+1] == 'f' or line[i+1] == 'l' or line[i+1] == 'i'){
  // 	  comboCount++;
  // 	}
  //     }
  //   }

  //   //display the results of the word search    
  //   cout << vowelCount << " is vowel count of " << line << endl;
  //   cout << otherCount << " is other count of " << line << endl;
  //   cout << whiteSpace << " is the white space of " << line << endl;
  //   cout << comboCount << " is the number of combos of " << line << endl;

  //   //reset counts for the next word
  //   vowelCount = 0;
  //   otherCount = 0;
  //   whiteSpace = 0;
  //   comboCount = 0;
  // }

  //use an if else statement to read grades and to generate a grade report
  
  // string gradeReport[] = {"F","D","C","B","A","A++"};

  // int grade;

  // // //use a contional loop:
  // while(cin >> grade){
  //   (grade < 60) ? cout << "your grade is: " << gradeReport[0] << endl :
  //       /* else */ cout << "your grade is: " << gradeReport[(grade - 50)/10] << endl;
  // }


  //use a traditional for loop 
  // cout << "please input a grade you would like to receive a letter grade for: " << endl;
  
  // while(cin >> grade){
  //   if(grade < 60){
  //     cout << "your grade is " << gradeReport[0] << endl;
  //   }else {
  //     cout << "your grade is " << gradeReport[(grade-50)/10] << endl;
  //   }
  // }

  
  // //while loop with no block.
  // //use only a comma
  // //add 1 to a number 10 times

  // int num1 = 0, num2 = 1;

  // while(num2 <= 10) num1 += num2, num2++;

  // cout << num1 << " num1 is the sum inclusive from 1 to 10 " << endl;
    

  return 0;

}
