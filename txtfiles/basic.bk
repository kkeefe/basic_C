#include <cstddef>
#include <iostream>
#include <fstream>
#include <cstring>
#include <vector> //library for vectur usage

using std::string;
using std::cout;
using std::cin;
using std::getline;
using std::vector;

int main(){

  //integer quotients are always rounded down
  int a1 = 1199/200, b1 = 10, c1 = 20;
  int& d1 = c1;

  cout << "the value of a1 + b1*c2/a1 is: " << a1 + b1*c1/a1 << std::endl;

  cout << "the value should be 5 + 10*20/5 = 45 " << std::endl;

  cout << "the value of d1 is :" << d1 << std::endl;

  int change;

  cout << "please input the change you would like to add to d1: " << std::endl;

  cin >> change;
  d1 += change;
  c1 += change;

  
  cout << "this ies the value of d1 : " << d1 << std::endl;

  cout << "this ies the value of c1 : " << c1 << std::endl;

  d1 = a1;
  
  cout << "this ies the value of &d1 : " << &d1 << std::endl;

  cout << "this ies the value of &c1 : " << &c1 << std::endl;

  cout << "this after assignment the value of d1 : " << d1 << std::endl;

  cout << "this after assignment the value of c1 : " << c1 << std::endl;

  //print the multi-D array using three different methods:
  int ia[3][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
  };

  //rows becomes a symonym for an array of 4 integers
  typedef int rows[4];
  
  cout << "Ordinary for : range loop - " << std::endl;
  //range : for loop
  for(rows &col : ia){
    for(int &row : col){
      cout << row << "\t";
    }
    //begin a new line after each row is completed
    cout << std::endl;
  }
  //note that the range of the n dimensional arrow starts from the outside in. The array is integers, made of rows. Thus, rows is the first type: int[4], and int is the last type held in the array.

  cout << "Ordinary for loop: " << std::endl;
  //ordinary for loop with subscripts
  //note that in the index notation, each for loops iterates of a class type integer.
  for(int i = 0; i < 3; i++){
    for(int j = 0; j < 4; j++){
      cout << ia[i][j] << "\t";
    }
    cout << std::endl;
  }

  //ordinary for loop with pointers for indicies
  int ia2[3][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
  };

  cout << "Array using pointer notation: " << std::endl;
  //define a pointer that points to a four dimensional array of integers, and iterate over it..  
  for(int(*p)[4] = std::begin(ia2); p != std::end(ia2); p++){
    //within the pointer, you can use a range based for loop to iterate over the array you've been pointed to.
    for(int c : *p){
      cout << c << "\t";
    }
    cout << std::endl;
  }

  //create an 2 dimensional array using pointers that can added to.
  //an array stores objects of a particular type, integer array.

  //define a 3,3 vectors array.
  int IntArray2D[3][3];

  // here 2dVecArray is an array of 3 arrays of integer type..


  

  //define int3 rows be be 3 integer array.
  

  

  
  return 0;
  
}
